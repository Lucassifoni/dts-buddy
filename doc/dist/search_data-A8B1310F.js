searchData={"items":[{"type":"module","title":"DtsBuddy","doc":"DtsBuddy is meant to provide utilities to handle runtime loading of\ndevice tree overlays, while reducing the ceremony required by the\nconfigfs interface.","ref":"DtsBuddy.html"},{"type":"module","title":"Requirements - DtsBuddy","doc":"Nerves systems must be compiled with those options for this to work :\n\n    BR2_PACKAGE_DTC=y\n    BR2_PACKAGE_DTC_PROGRAMS=y\n    CONFIG_OF_CONFIGFS=y","ref":"DtsBuddy.html#module-requirements"},{"type":"module","title":"Usage - DtsBuddy","doc":"#","ref":"DtsBuddy.html#module-usage"},{"type":"module","title":"Enabling overlays configfs - DtsBuddy","doc":"The overlays configfs must first be enabled :\n\n    iex> DtsBuddy.enable_overlays()\n    :ok\n\nThis has the same effect as running this command (and does behind the scenes) :\n\n    System.cmd(\"mount\" , [\"-t\", \"configfs\", \"none\", \"/sys/kernel/config\"])\n\n#","ref":"DtsBuddy.html#module-enabling-overlays-configfs"},{"type":"module","title":"Checking if overlays are enabled - DtsBuddy","doc":"iex> DtsBuddy.overlays_enabled?()\n    true\n\n#","ref":"DtsBuddy.html#module-checking-if-overlays-are-enabled"},{"type":"module","title":"Compiling a DTS source - DtsBuddy","doc":"If your source is fully static, you can either call `DtsBuddy.compile/2` or use\nthe sigil provided by `DtsBuddy.Sigil`. The source of the following examples was\nprovided by Frank Hunleth.\n\n    iex> import DtsBuddy.Sigil\n        \n    iex> ~DTS\"\"\"\n    /dts-v1/;\n    /plugin/;\n\n    /* Compile:\n        dtc -@ -I dts -O dtb -o gpio_led.dtbo gpio_led.dts\n    */\n\n    &{/} {\n        gpios_leds {\n            compatible = \"gpio-leds\";\n            test_led@36 {\n                label = \"test-led-gpio36\";\n                gpios = <&pio 1 4 0>; /* GPIO36/PB4 */\n\n                /* Blink LED at 1 Hz (500 ms on, off) */\n                linux,default-trigger = \"pattern\";\n                led-pattern = <1 500 1 0 0 500 0 0>;\n            };\n        };\n    };\n    \"\"\"test_led  \n\n    {:ok, \"/data/test_led.dtbo\", \"test_led\"}\n\n\nYou should provide both the heredoc contents (inside triple quotes) and modifiers\n(after the heredoc closes, here \"test_led\"). We use the modifiers as the overlay\nname later.\n\nUsing the sigil is strictly equivalent to calling `DtsBuddy.compile/2`.\n`DtsBuddy` does not immediately load this overlay.\n\nIf your source is not static, you can either manually build it to call `DtsBuddy.compile/2`,\nor use `DtsBuddy.compile_eex/3` to use an EEX template string.\n\n#","ref":"DtsBuddy.html#module-compiling-a-dts-source"},{"type":"module","title":"Loading an overlay - DtsBuddy","doc":"The DtsBuddy.load function is thought to use the compilation result coming from either\n`DtsBuddy.compile/2` or `DtsBuddy.compile_eex/3` directly, that is, a tuple having\nthe form `{:ok, dtbo_file, name}`.\n\nLoading the overlay with the name   will create the directory `/sys/kernel/config/device-tree/overlays/ `,\nand write the contents of the compiled dtbo file to `/sys/kernel/config/device-tree/overlays/ /dtbo`.\n\nAfter loading an overlay, calling `DtsBuddy.status/1` with the overlay name should return `:applied`.","ref":"DtsBuddy.html#module-loading-an-overlay"},{"type":"function","title":"DtsBuddy.compile/2","doc":"","ref":"DtsBuddy.html#compile/2"},{"type":"function","title":"DtsBuddy.compile_eex/3","doc":"","ref":"DtsBuddy.html#compile_eex/3"},{"type":"function","title":"DtsBuddy.enable_overlays/0","doc":"","ref":"DtsBuddy.html#enable_overlays/0"},{"type":"function","title":"DtsBuddy.load/1","doc":"","ref":"DtsBuddy.html#load/1"},{"type":"function","title":"DtsBuddy.overlays_enabled?/0","doc":"","ref":"DtsBuddy.html#overlays_enabled?/0"},{"type":"function","title":"DtsBuddy.status/1","doc":"","ref":"DtsBuddy.html#status/1"},{"type":"function","title":"DtsBuddy.unload/1","doc":"","ref":"DtsBuddy.html#unload/1"},{"type":"module","title":"DtsBuddy.Backend","doc":"Collection of functions that actually check system status, compile DTS files,\ncheck overlay status.","ref":"DtsBuddy.Backend.html"},{"type":"function","title":"DtsBuddy.Backend.checks/0","doc":"Helper to display all system checks. Quite frugal for now, but should be extended.","ref":"DtsBuddy.Backend.html#checks/0"},{"type":"function","title":"DtsBuddy.Backend.compile/2","doc":"Compiles a static DTS string to the given name.\nFiles written are /data/ .dts and /data/ .dtbo.","ref":"DtsBuddy.Backend.html#compile/2"},{"type":"function","title":"DtsBuddy.Backend.compile_eex/3","doc":"Injects an EEx template and compiles it.","ref":"DtsBuddy.Backend.html#compile_eex/3"},{"type":"function","title":"DtsBuddy.Backend.device_tree_compiler_present?/0","doc":"Checks the presence of the `dtc` binary.","ref":"DtsBuddy.Backend.html#device_tree_compiler_present?/0"},{"type":"function","title":"DtsBuddy.Backend.enable_overlays/0","doc":"Calls `mount -t configfs none /sys/kernel/config`.","ref":"DtsBuddy.Backend.html#enable_overlays/0"},{"type":"function","title":"DtsBuddy.Backend.load/1","doc":"Loads an overlay. This function is meant to be directly called with the\noutput of DtsBuddy.compile/2 or DtsBuddy.compile_eex/3, that is, a tuple\nof the form `{:error, term()}` or `{:ok, path, name}` where path is the\nlocation of the compiled dtbo file, and name is the desired overlay name.","ref":"DtsBuddy.Backend.html#load/1"},{"type":"function","title":"DtsBuddy.Backend.overlays_enabled?/0","doc":"Checks the presence of the /sys/kernel/config/device-tree/overlays directory.","ref":"DtsBuddy.Backend.html#overlays_enabled?/0"},{"type":"function","title":"DtsBuddy.Backend.status/1","doc":"Reads /sys/kernel/config/device-tree/overlays/ /status and gives the result\nas `:applied` or `:unapplied`.","ref":"DtsBuddy.Backend.html#status/1"},{"type":"function","title":"DtsBuddy.Backend.unload/1","doc":"Unloads an overlay. This should be used in a managed way as overlays must be\nunloaded in-order in a LIFO way. That is, the last applied overlay must be the\nfirst to be un-applied.\nIf you wish to unload the third-topmost loaded overlay, while keeping the two\nthat follow, you should unapply three overlays, then re-apply the last two.\nDtsBuddy.OverlayManager will help with that.","ref":"DtsBuddy.Backend.html#unload/1"},{"type":"module","title":"DtsBuddy.Diagnostic","doc":"Runs an overlay through the compilation and loading cycle, then proceeds to check\nif there really is the expected outcome on the header.\n\nTo run a diagnostic cycle, you should call run_diagnostic/1, passing a reader function\nas an argument. This is so that we do not directly depend on Circuits.GPIO as this is\nnot strictly needed to use DtsBuddy.\n\nExample use, succeeding :\n\n    iex> {:ok, gpio} = Circuits.GPIO.open(\"GPIO12\", :input)\n    {:ok, %Circuits.GPIO.CDev{}}\n    iex> reader = fn () -> Circuits.GPIO.read(gpio)\n    #Function<>\n    iex> DtsBuddy.Diagnostic.run_diagnostic(reader)\n    [DtsBuddy.Diagnostic] Running system checks\n    [DtsBuddy.Diagnostic] All system checks passed\n    [DtsBuddy.Diagnostic] Loading a sample overlay\n    [DtsBuddy.Diagnostic] Sampling GPIO with the user-supplied reader function for ~5 seconds\n    [DtsBuddy.Diagnostic] Behavior of the activated GPIO looks correct with 5 LOW samples and 5 HIGH samples\n    [DtsBuddy.Diagnostic] Unloading overlay testled\n    [DtsBuddy.Diagnostic] Everything looks OK\n    :ok\n\nExample use, failing :\n\n    iex> {:ok, gpio} = Circuits.GPIO.open(\"GPIO12\", :input)\n    {:ok, %Circuits.GPIO.CDev{}}\n    iex> reader = fn () -> Circuits.GPIO.read(gpio)\n    #Function<>\n    iex> DtsBuddy.Diagnostic.run_diagnostic(reader)\n    [DtsBuddy.Diagnostic] Running system checks\n    [DtsBuddy.Diagnostic] Device tree compiler is missing on the system.\n    [DtsBuddy.Diagnostic] All tests did not pass. Please refer to the above logs for further details.\n    :error","ref":"DtsBuddy.Diagnostic.html"},{"type":"function","title":"DtsBuddy.Diagnostic.gather_samples/1","doc":"Gathers samples to check the actual behavior of the LED overlay by sampling GPIO roughly every 100ms.\nOutput should be a list of 1 and 0s.","ref":"DtsBuddy.Diagnostic.html#gather_samples/1"},{"type":"function","title":"DtsBuddy.Diagnostic.valid_samples/1","doc":"Checks if the samples collected by the reader function look correct, in the sense that there was enough variation\nof output in the given time. An erratic GPIO would currently look correct if it was checked by this function though.","ref":"DtsBuddy.Diagnostic.html#valid_samples/1"},{"type":"module","title":"DtsBuddy.OverlayManager","doc":"WIP : Load overlays through OverlayManager to be able to track\nthe overlay application order, allowing to unload them in a proper fashion.","ref":"DtsBuddy.OverlayManager.html"},{"type":"module","title":"DtsBuddy.Paths","doc":"Helper module to remove paths juggling out of DtsBuddy.Backend","ref":"DtsBuddy.Paths.html"},{"type":"function","title":"DtsBuddy.Paths.config_dir/0","doc":"Configfs directory.","ref":"DtsBuddy.Paths.html#config_dir/0"},{"type":"function","title":"DtsBuddy.Paths.dtbo_dir/1","doc":"DTBO directory for a given","ref":"DtsBuddy.Paths.html#dtbo_dir/1"},{"type":"function","title":"DtsBuddy.Paths.dtbo_file_path/1","doc":"Location of the DTBO file to be written for the given  .","ref":"DtsBuddy.Paths.html#dtbo_file_path/1"},{"type":"function","title":"DtsBuddy.Paths.dts_file_path/1","doc":"Location of the DTS file to be written for the given  .","ref":"DtsBuddy.Paths.html#dts_file_path/1"},{"type":"function","title":"DtsBuddy.Paths.overlay_dir/1","doc":"Overlay directory for a given","ref":"DtsBuddy.Paths.html#overlay_dir/1"},{"type":"function","title":"DtsBuddy.Paths.overlays_dir/0","doc":"Overlays directory.","ref":"DtsBuddy.Paths.html#overlays_dir/0"},{"type":"function","title":"DtsBuddy.Paths.status_dir/1","doc":"Status file path for a given","ref":"DtsBuddy.Paths.html#status_dir/1"},{"type":"function","title":"DtsBuddy.Paths.writable_path/1","doc":"Location of a writable directory for the given  . Should be\nconfigurable by the user as people maybe have configurations\ndiverging from the common nerves convention to have /data writable ?","ref":"DtsBuddy.Paths.html#writable_path/1"},{"type":"module","title":"DtsBuddy.Sigil","doc":"Sigil form for DtsBuddy, allowing lighter syntax to compile an overlay.","ref":"DtsBuddy.Sigil.html"},{"type":"function","title":"DtsBuddy.Sigil.sigil_DTS/2","doc":"","ref":"DtsBuddy.Sigil.html#sigil_DTS/2"}],"content_type":"text/markdown"}